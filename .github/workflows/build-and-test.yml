name: Build and test on multiple platforms
run-name: ðŸš€ Build and Test  (${{ github.sha }})

on:
  push:
    branches:
      - dev

jobs:
  build-wheels:
    name: Build Python Wheel (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14, ubuntu-22.04-arm ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install
        run: pip install .
        env:
          CC: ${{ matrix.os == 'ubuntu-22.04-arm' && '/usr/bin/aarch64-linux-gnu-gcc' || '' }}

  build-cpp:
    name: Build C++ SDK (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14, ubuntu-22.04-arm]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Make Output Directory
        run: |
          mkdir -p _output
        shell: bash

      - name: Install Dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          python3 -m pip install --upgrade pip conan

      - name: Install Dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install cmake
          python3 -m pip install --upgrade pip conan --break-system-packages

      - name: Install Dependencies (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes
          python -m pip install --upgrade pip conan

      - name: Configure Conan
        run: |
          conan profile detect --force

      # RELEASE MODE

      - name: Install Dependencies (Release)
        run: |
          conan install . -s build_type=Release -b missing -of build

      - name: Configure CMake (Linux or macOS - Release)
        if: ${{ startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos') }}
        run: |
          cmake --preset conan-release -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_output -DBUILD_EXAMPLES=ON

      - name: Configure CMake (Windows - Release)
        if: startsWith(matrix.os, 'windows')
        run: |
          cmake --preset conan-default -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_output -DBUILD_EXAMPLES=ON

      - name: Build and Install (Release)
        run: |
          cmake --build --target install --preset conan-release
        shell: bash

      # Debug MODE

      - name: Install Dependencies (Debug)
        run: |
          conan install . -s build_type=Debug -b missing -of build

      - name: Configure CMake (Linux or macOS - Debug)
        if: ${{ startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos') }}
        run: |
          cmake --preset conan-debug -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_output -DBUILD_EXAMPLES=ON

      - name: Configure CMake (Windows - Debug)
        if: startsWith(matrix.os, 'windows')
        run: |
          cmake --preset conan-default -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_output -DBUILD_EXAMPLES=ON

      - name: Build and Install (Debug)
        run: |
          cmake --build --target install --preset conan-debug
        shell: bash

      - name: Archive SDK
        run: |
          cp README.md LICENSE NOTICE _output || true
          tar -czvf rby1_sdk-${{ matrix.os }}.tar.gz -C _output .
          echo "TAR_FILE=rby1_sdk-${{ matrix.os }}.tar.gz" >> $GITHUB_ENV
        shell: bash

      - name: Upload SDK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rby1_sdk-${{ matrix.os }}
          path: ${{ env.TAR_FILE }}